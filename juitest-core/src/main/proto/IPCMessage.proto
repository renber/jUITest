
syntax = "proto3";

option java_package = "de.renebergelt.juitest.core.comm.messages";
option java_outer_classname = "IPCProtocol";

message IPCMessage {
    oneof content {
        AttachMessage attach = 1;
        SimpleResponseMessage simpleResponse = 2;
        GetTestsMessage getTests = 3;
        RunTestMessage runTest = 4;
        CancelTestMessage cancelTest = 5;
        TestListMessage testList = 6;
        TestResultMessage testResult = 7;
        TestLogMessage testLog = 8;
        TestPausedMessage testPaused = 9;
        ResumeTestMessage resumeTest = 10;
    };
}

message SimpleResponseMessage {
    ResponseStatus status = 1;
}

// Launches the client software which should be automated
// and attaches the monitor
message AttachMessage {
    repeated string programArguments = 1;
}

message GetTestsMessage {
    // --
}

// Returned as response to GetTestsMessage
// contains a list of all available tests
message TestListMessage {
    repeated TestDescriptor tests = 1;
}

message TestDescriptor {
    string testClassName = 1;
    string testMethodName = 2;
    string description = 3;
    repeated TestParameter parameters = 4;
}

// Indicates that the given test should be run
message RunTestMessage {
    // unique identifier for this test
    string testId = 1;
    string testClassName = 2;
    string testMethodName = 3;
    repeated TestParameter parameters = 4;
}

// Aborts execution of the running test with the given id
message CancelTestMessage {
    string testId = 1;
}

// sent when a test's execution ends (i.e. it finishes or is cancelled)
message TestResultMessage {
    string testId = 1;
    TestResult result = 2;

    // if result is not SUCCESS, error description goes here
    string errorDescription = 3;
}

// contains a log message from a text
message TestLogMessage {
    string testId = 1;
    string text = 2;
}

// message which indicates that test execution has been paused
message TestPausedMessage {
    string testId = 1;
    string message = 2;
}

// message which indicates that a paused test should be continued
message ResumeTestMessage {
    string testId = 1;
}

message TestParameter {
    string name = 1;
    oneof value {
        string str_value = 2;
        int32 int_value = 3;
        int64 long_value = 4;
        float float_value = 5;
        bool bool_value = 6;
    }
}

enum ResponseStatus {
    OK = 0;
    FAILED = 1;
}

enum TestResult {
    SUCCESS = 0;
    FAILURE = 1;
    TIMEOUT = 2;
    CANCELED = 3;
}
